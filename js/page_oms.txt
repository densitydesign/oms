

ArrayList<Point> points = new ArrayList<Point>();
float globDist=90;
ArrayList<Point> near = new ArrayList<Point>();


void setup() {
  
  size(screen.width,500);
  
  for( int i=0; i<300; i++) {
    points.add(new Point(random(width),random(height),random(-3,3),random(-3,3))); 
  } 
}


void draw() {
  
 background(#425863);
  near.clear();
  
 for(Point p : points) {
  
  stroke(255);
  strokeWeight(1);
  point(p.x,p.y);
 
  
  if(p.x > mouseX-globDist && p.x < mouseX+globDist && p.y > mouseY-globDist && p.y < mouseY+globDist) {
   
     near.add(p); 
    
  }
  
  p.x+=p.velx;
  p.y+=p.vely;

  if(p.x > width) p.x=0;
  if(p.x < 0) p.x=width;
  if(p.y > height) p.y=0;
  if(p.y < 0) p.y=height;  
  
  
 }
 
 strokeWeight(1);
 
 for(Point p : near) { 
   
    for(Point q : near) {
     
      if(p.dist(q) < p.di) {
        
        float trasp = map(p.dist(q),0,p.di,255,0);
        stroke(255,trasp);
        line(p.x,p.y,q.x,q.y);
      }
     
    } 
   
 }
 
 
  
}

void resize(float X, float  Y) {
  size(X,Y);
}

class Point extends PVector{
  
  
 float velx;
 float vely;

 boolean connected = false;
 float di = 100;

  Point(float x, float y, float velx, float vely) {
   
     this.x = x;
     this.y = y;
     this.velx = velx;
     this.vely = vely;
    
  } 
  
  float dist(Point p) {
  
  	return sqrt(sq(this.x-p.x)+sq(this.y-p.y))
  
  }
  
}

